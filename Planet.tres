[gd_resource type="ShaderMaterial" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id=25]
output_port_for_preview = 0
input_name = "alpha"

[sub_resource type="VisualShaderNodeScalarOp" id=29]
default_input_values = [ 0, 0.0, 1, 0.99 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=30]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorLen" id=19]

[sub_resource type="VisualShaderNodeTextureUniform" id=20]
uniform_name = "PlanetColor"

[sub_resource type="VisualShaderNodeTextureUniform" id=26]
uniform_name = "TextureUniform"

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D PlanetColor;
uniform sampler2D TextureUniform;



void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorLen:3
	float n_out3p0 = length(n_out2p0);

// ScalarOp:10
	float n_in10p1 = 0.99000;
	float n_out10p0 = n_out3p0 - n_in10p1;

// ScalarOp:11
	float n_in11p1 = 10.00000;
	float n_out11p0 = n_out10p0 * n_in11p1;

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(PlanetColor, vec3(n_out11p0).xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// TextureUniform:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 n_tex_read = texture(TextureUniform, vec3(n_out11p0).xy);
		n_out9p0 = n_tex_read.rgb;
		n_out9p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333));

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Input:3
	float n_out3p0 = COLOR.a;

// Output:0
	ALBEDO = n_out2p0;
	ROUGHNESS = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -534.852, 158.015 )
nodes/vertex/0/position = Vector2( 660, 120 )
nodes/vertex/2/node = SubResource( 18 )
nodes/vertex/2/position = Vector2( -720, 480 )
nodes/vertex/3/node = SubResource( 19 )
nodes/vertex/3/position = Vector2( -680, 380 )
nodes/vertex/6/node = SubResource( 20 )
nodes/vertex/6/position = Vector2( 260, 160 )
nodes/vertex/9/node = SubResource( 26 )
nodes/vertex/9/position = Vector2( 240, 400 )
nodes/vertex/10/node = SubResource( 29 )
nodes/vertex/10/position = Vector2( -480, 340 )
nodes/vertex/11/node = SubResource( 30 )
nodes/vertex/11/position = Vector2( -260, 320 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 6, 0, 0, 6, 9, 0, 0, 7, 3, 0, 10, 0, 10, 0, 11, 0, 11, 0, 6, 0, 11, 0, 9, 0 )
nodes/fragment/0/position = Vector2( 600, 140 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( 220, 140 )
nodes/fragment/3/node = SubResource( 25 )
nodes/fragment/3/position = Vector2( 220, 260 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 0, 3 )

[sub_resource type="Gradient" id=21]
offsets = PoolRealArray( 0.103614, 0.214458, 0.404819, 0.838554, 1 )
colors = PoolColorArray( 0, 0.0809326, 0.398438, 1, 0.0420696, 0.340011, 0.0170065, 1, 0.0660844, 0.685059, 0, 1, 0.476563, 0.335083, 0, 1, 0.966209, 0.957076, 0.935445, 1 )

[sub_resource type="GradientTexture" id=22]
gradient = SubResource( 21 )

[sub_resource type="Gradient" id=27]
offsets = PoolRealArray( 0.2, 0.248193 )
colors = PoolColorArray( 0, 0, 0, 1, 0.821283, 0.821283, 0.821283, 1 )

[sub_resource type="GradientTexture" id=28]
gradient = SubResource( 27 )

[resource]
shader = SubResource( 6 )
shader_param/PlanetColor = SubResource( 22 )
shader_param/TextureUniform = SubResource( 28 )
